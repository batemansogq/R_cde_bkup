ggtitle("x vs y")
}
# full graphing function
plot.reg <- function (df){
require(ggplot2)
#used for multiple graph plots
require(gridExtra)
mod <- lm(y~x, data=df)
df$score <- predict(mod)
df$resids <- df$y - df$score
p1 <- ggplot(df, aes(x,y)) +
geom_point(size=2) +
#add in regress line
geom_line(aes(x, score, colour='red')) +
ggtitle('x vs y with regression')
p2 <- ggplot(df, aes(resids)) +
geom_histogram() +
ggtitle('dis of residuals')
#display both graphs
grid.arrange(p1, p2, nrow=2)
print(paste('intercept =', as.character(mod$coefficients[1])))
print(paste('slope =', as.character(mod$coefficients[2])))
SSE <- sqrt(sum(df$resids * df$resids))
SSR <- sqrt(sum(df$y * df$y))
n = nrow(df)
adjr2 <- 1.0 * (SSE/SSR) * ((n-1)/(n-2))
#how much the model explains the variance in the data
print(paste('Adjusted R^2 =', as.character(adjr2)))
}
#wrapper function for multiple std dev values
demo.reg <- function(){
sd <- c(1, 5, 10)
for (i in 1:3) {
regData <- sim.reg.data(0,0,10,10,50,sd[i])
plot.reg(regData)
}
}
demo.reg()
summary(mod)
sim.reg.data(0,0,10,10,100,2)
1x <- sim.reg.data(0,0,10,10,100,2)
x11 <- sim.reg.data(0,0,10,10,100,2)
xm <- lm(y ~ x, data=x11)
summary(xm)
summary(xm)$adj.r.squared
# full graphing function
plot.reg <- function (df){
require(ggplot2)
#used for multiple graph plots
require(gridExtra)
mod <- lm(y~x, data=df)
df$score <- predict(mod)
df$resids <- df$y - df$score
p1 <- ggplot(df, aes(x,y)) +
geom_point(size=2) +
#add in regress line
geom_line(aes(x, score, colour='red')) +
ggtitle('x vs y with regression')
p2 <- ggplot(df, aes(resids)) +
geom_histogram() +
ggtitle('dis of residuals')
#display both graphs
grid.arrange(p1, p2, nrow=2)
print(paste('intercept =', as.character(mod$coefficients[1])))
print(paste('slope =', as.character(mod$coefficients[2])))
SSE <- sqrt(sum(df$resids * df$resids))
SSR <- sqrt(sum(df$y * df$y))
n = nrow(df)
adjr2 <- 1.0 * (SSE/SSR) * ((n-1)/(n-2))
#how much the model explains the variance in the data
print(paste('Adjusted R^2 =', as.character(adjr2)))
print(paste('Summary Adjusted R^2 =', as.character(summary(mod)$adj.r.squared)))
}
demo.reg()
plot.reg <- function (df){
require(ggplot2)
#used for multiple graph plots
require(gridExtra)
mod <- lm(y~x, data=df)
df$score <- predict(mod)
df$resids <- df$y - df$score
p1 <- ggplot(df, aes(x,y)) +
geom_point(size=2) +
#add in regress line
geom_line(aes(x, score, colour='red')) +
ggtitle('x vs y with regression')
p2 <- ggplot(df, aes(resids)) +
geom_histogram() +
ggtitle('dis of residuals')
#display both graphs
grid.arrange(p1, p2, nrow=2)
print(paste('intercept =', as.character(mod$coefficients[1])))
print(paste('slope =', as.character(mod$coefficients[2])))
SSE <- sqrt(sum(df$resids * df$resids))
SSR <- sqrt(sum(df$y * df$y))
n = nrow(df)
adjr2 <- 1.0 * (SSE/SSR) * ((n-1)/(n-2))
#how much the model explains the variance in the data
print(paste('Adjusted R^2 =', as.character(adjr2)))
print(paste('Summary Adjusted R^2 =', as.character(summary(mod)$adj.r.squared)))
print(paste('Summary R^2 =', as.character(summary(mod)$r.squared)))
}
demo.reg()
library("dplyr")
#getwd()
#setwd("//svrau100qsm00.oceania.corp.anz.com/mckinns2$/My Documents/Current Work/R/Analytics_data")
#setwd("//svrau100qsm00.oceania.corp.anz.com/mckinns2$/My Documents/Current Work/R")
#word analysis
library(tm)
# reframe data
library(reshape2)
#graphing
library(ggplot2)
#Correlogram is a graph of correlation matrix
library(corrplot)
#remove unwanted chars
library(stringr)
#req for stem
library(SnowballC)
# wordcloud
library(wordcloud)
library(RColorBrewer)
install.packages(c("corrplot", "SnowballC", "wordcloud"))
library(SnowballC)
# wordcloud
library(wordcloud)
library(RColorBrewer)
?read.lines
?read.line
?readLines
simp <- readLines("E://R/Text mining notes/SIMP_s08_e23.txt")
simp <- readLines("E://R/Text mining notes/SIMP_s08_e23.txt", ok=TRUE)
simp <- readLines("E://R/Text mining notes/SIMP_s08_e23.txt", ok=TRUE)
str(simp)
simp$V1 <- str_replace_all(simp, "[^[:alnum:]]", " ")
simp <- str_replace_all(simp, "[^[:alnum:]]", " ")
str(simp)
simp
simp1 <- as.data.frame(simp)
str(simp1)
head(simp1)
tail(simp1)
colnames(simp1) <- c( "Lines")
str(simp1)
? as.data.frame
simp1 <- as.data.frame(simp, stringsAsFactors = FALSE)
colnames(simp1) <- c( "Lines")
str(simp1)
simp_cp <- Corpus(VectorSource(simp1))
inspect(simp_cp[1])
simp_cp <- tm_map(simp_cp, tolower)
simp_cp <- tm_map(simp_cp, PlainTextDocument)
simp_cp <- tm_map(simp_cp, removePunctuation)
simp_cp <- tm_map(simp_cp, removeNumbers)
simp_cp <- tm_map(simp_cp, removeWords, stopwords("english"))
simp_cp <- tm_map(simp_cp, stemDocument)
simp_cp <- tm_map(simp_cp, stripWhitespace)
simp_cp <- score(simp_cp)
simp_dtm <-  DocumentTermMatrix(simp_cp)
findFreqTerms(simp_dtm, 5)
head(sort(colSums(as.matrix(simp_dtm)), decreasing=TRUE),20)
simp_dtm_m <- as.matrix(simp_dtm)
head(simp_dtm_m)
positives= readLines("E://R/Text mining notes/positive-words.txt")
negatives = readLines("E://R/Text mining notes/negative-words.txt")
sentiment_scores = function(df, positive_words, negative_words){
df_score <-data.frame(Score=integer())
for (i in 1:nrow(df)) {
#make lower
df_l = tolower(df[i,])
# split sentence into words with str_split function from stringr package
word_list = str_split(df_l, " ")
words = unlist(word_list)
# get the position of the matched term or NA
# we just want a TRUE/FALSE
positive_matches = sum(!is.na(match(words,positives)), na.rm=TRUE)
negative_matches = sum(!is.na(match(words,negatives)), na.rm=TRUE)
#get scores
score = sum(positive_matches) - sum(negative_matches)
df_score[i,] <- score
}
return(df_score)
}
score = sentiment_scores(simp1, positives, negatives)
simp1$score=score
qplot(simp1$score, geom="histogram")
wordcloud(colnames(simp_dtm_m), min.freq=5, scale=c(5, .1), colors=brewer.pal(6, "Dark2"))
hist(simp1$score)
str(simp1)
head(simp1)
simp1[6,]
match(simp1[6,],positives)
match(simp1[6,],negatives)
match(unlist(str_split(simp1[6,], " ")),negatives)
match(unlist(str_split(simp1[6,], " ")),positives)
negatives[35]
negatives(35)
positives= readLines("E://R/Text mining notes/positive-words.txt")
negatives = readLines("E://R/Text mining notes/negative-words.txt")
? readLines
?read.csv
positives <- read.table("E://R/Text mining notes/positive-words.txt", header=FALSE, skip=35)
positives
head(positives)
positives <- read.table("E://R/Text mining notes/positive-words.txt", header=FALSE, skip=35)
negatives = read.table("E://R/Text mining notes/negative-words.txt", header=FALSE, skip=35)
sentiment_scores = function(df, positive_words, negative_words){
df_score <-data.frame(Score=integer())
for (i in 1:nrow(df)) {
#make lower
df_l = tolower(df[i,])
# split sentence into words with str_split function from stringr package
word_list = str_split(df_l, " ")
words = unlist(word_list)
# get the position of the matched term or NA
# we just want a TRUE/FALSE
positive_matches = sum(!is.na(match(words,positives)), na.rm=TRUE)
negative_matches = sum(!is.na(match(words,negatives)), na.rm=TRUE)
#get scores
score = sum(positive_matches) - sum(negative_matches)
df_score[i,] <- score
}
return(df_score)
}
score = sentiment_scores(simp1, positives, negatives)
simp1$score=score
hist(simp1$score)
qplot(simp1$score, geom="histogram")
table(simp1$score)
simp1[6,]
match(unlist(srt_split(simp1[6,])),positives)
match(unlist(str_split(simp1[6,])),positives)
?match
match(unlist(str_split(simp1[6,], " ")),positives)
match(unlist(str_split(simp1[6,], " ")),negatives)
negatives
negatives["blown"]
negatives=="blown"
simp1[6,]
simp1[7,]
match(unlist(str_split(simp1[7,], " ")),negatives)
match("pain",negatives)
class(negatives)
negatives[negatives$V1=="pain"]
negatives$V1
negatives$V1==pain
negatives$V1=="pain""
negatives$V1=="pain"
match("pain",negatives$V1)
match("pain",negatives)
sentiment_scores = function(df, positive_words, negative_words){
df_score <-data.frame(Score=integer())
for (i in 1:nrow(df)) {
#make lower
df_l = tolower(df[i,])
# split sentence into words with str_split function from stringr package
word_list = str_split(df_l, " ")
words = unlist(word_list)
# get the position of the matched term or NA
# we just want a TRUE/FALSE
positive_matches = sum(!is.na(match(words,positives$V1)), na.rm=TRUE)
negative_matches = sum(!is.na(match(words,negatives$V1)), na.rm=TRUE)
#get scores
score = sum(positive_matches) - sum(negative_matches)
df_score[i,] <- score
}
return(df_score)
}
score = sentiment_scores(simp1, positives, negatives)
simp1$score=score
qplot(simp1$score, geom="histogram")
simp1[7,]
match(unlist(str_split(simp1[7,], " ")),negatives$V1)
match(unlist(str_split(simp1[7,], " ")),positives$V1)
match(unlist(str_split(simp1[6,], " ")),positives$V1)
match(unlist(str_split(simp1[5,], " ")),positives$V1)
match(unlist(str_split(simp1[5,], " ")), negatives$V1)
simp1[5,]
hist(as.numeric(simp1$score))
wordcloud(simp_cp, scale=c(5,0.5),
max.words=100,
random.order=FALSE,
rot.per=0.35,
use.r.layout=FALSE,
colors=brewer.pal(8, “Dark2”))
wordcloud(simp_cp, scale=c(5,0.5),
max.words=100,
random.order=FALSE,
rot.per=0.35,
use.r.layout=FALSE,
colors=brewer.pal(8, 'dark2'))
?brewer.pal
wordcloud(simp_cp, scale=c(5,0.5),
max.words=100,
random.order=FALSE,
rot.per=0.35,
use.r.layout=FALSE,
colors=brewer.pal(8, 'Dark2'))
simp_cp <- tm_map(simp_cp, stemDocument)
simp_cp <- tm_map(simp_cp, stripWhitespace)
wordcloud(simp_cp, scale=c(5,0.5),
max.words=100,
random.order=FALSE,
rot.per=0.35,
use.r.layout=FALSE,
colors=brewer.pal(8, 'Dark2'))
head(simp_dtm_m)
v <- sort(rowSums(simp_dtm_m ),decreasing=TRUE)
df <- data.frame(word = names(v),freq=v)
head(df, 10)
v
simp_dtm_m
v <- sort(colSums(simp_dtm_m ),decreasing=TRUE)
v
df <- data.frame(word = names(v),freq=v)
head(df, 10)
sum(!is.na(match(df$word,positives$V1)), na.rm=TRUE)
match(df$word,positives$V1)
sum(match(df$word,positives$V1))
sum(match(df$word,positives$V1),na.rm=TRUE)
if(match(df$word,positives$V1){1} ELSE 0
if(match(df$word,positives$V1){1} ELSE (0)
if(match(df$word,positives$V1)) {1} ELSE (0)
if(match(df$word,positives$V1)) {1} Else (0)
if(match(df$word,positives$V1)) {1} else (0)
if(!is.na(match(df$word,positives$V1))) {1} else (0)
!is.na(match(df$word,positives$V1)))
!is.na(match(df$word,positives$V1))
if (!is.na(match(df$word,positives$V1))) {1} else (0)
if (!is.na(match(df$word,positives$V1))) {1} else {0}
(!is.na(match(df$word,positives$V1)))
(!is.na(match(df$word,negatives$V1)))
if (!is.na(match(df$word,negatives$V1))) {1}
score = sentiment_scores(df, positives, negatives)
df$score=score
head(df)
tail(df)
table(df$score)
!is.na(match(words,negatives$V1)
)
!is.na(match(df,negatives$V1)
)
!is.na(match(df[2],negatives$V1))
nrow(df)
!is.na(match(df[653,],positives$V1))
df[652,]
df[652,1]
df[650,1]
df[649,1]
d!is.na(match(df[649,1],negatives$V1))
!is.na(match(df[649,1],negatives$V1))
sum(!is.na(match(df[649,1],negatives$V1)))
col_sent = function(df, positive_words, negative_words){
df_score <-data.frame(Score=integer())
for (i in 1:nrow(df)) {
#make lower
df_l = tolower(df[i,1])
positive_matches = sum(!is.na(match(df_l[i,1],positives$V1)), na.rm=TRUE)
negative_matches = sum(!is.na(match(df_l[i,1],negatives$V1)), na.rm=TRUE)
#get scores
score = if (positive_matches>=1){1} else if (negative_matches>=1) {-1} else {0}
df_score[i,] <- score
}
return(df_score)
}
col_sent(df, positives, negatives)
df[1,1]
col_sent = function(df, positive_words, negative_words){
df_score <-data.frame(Score=integer())
for (i in 1:nrow(df)) {
#make lower
df_l = tolower(df[i,1])
positive_matches = sum(!is.na(match(df_l,positives$V1)), na.rm=TRUE)
negative_matches = sum(!is.na(match(df_l,negatives$V1)), na.rm=TRUE)
#get scores
score = if (positive_matches>=1){1} else if (negative_matches>=1) {-1} else {0}
df_score[i,] <- score
}
return(df_score)
}
col_sent(df, positives, negatives)
score = col_sent(df, positives, negatives)
df$score=score
str(df)
set.seed(1234)
wordcloud(words = df$word, freq = df$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
set.seed(1234)
wordcloud(words = df$word, freq = df$score, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
wordcloud(words = df$word, freq = df$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
set.seed(1234)
wordcloud(words = df$word, freq = df$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
#  colors=brewer.pal(8, "Dark2"))
colours=df$score)
df
head(df)
ggplot(df, aes(word, freq)) +
geom_tile(aes(fill = score), colour = "white") +
scale_fill_gradient(low = "white", +     high = "steelblue"))
ggplot(df, aes(word, freq)) +
geom_tile(aes(fill = score), colour = "white")
ggplot(df, aes(word, freq)) +
geom_tile(aes(score), colour = "white")
ggplot(df, aes(word, score)) +
geom_tile(aes(freq), colour = "white")
ggplot(df, aes(word, score)) +
geom_tile(aes(freq), colour = "white") +
scale_fill_gradient(low = "white", high = "steelblue"))
ggplot(df, aes(freq, word)) +
geom_tile(aes(score), colour = "white")
head(df, 10)
ggplot(head(df,35), aes(freq, word)) +
geom_tile(aes(score), colour = "white")
head(df,35)
head(df,55)
ggplot(head(df,35), aes(score, word)) +
geom_tile(aes(freq), colour = "white")
ggplot(head(df,55), aes(score, word)) +
geom_tile(aes(freq), colour = "white")
ggplot(head(df,55), aes(score, word)) +
geom_tile(aes(score), colour = "white")
ggplot(head(df,55), aes(score, word)) +
geom_tile(aes(score), colour = "white") +
scale_fill_gradient(low = "red", high = "steelblue"))
ggplot(head(df,55), aes(score, word)) +
geom_tile(aes(score), colour = "white") +
scale_fill_gradient(low = "red", high = "steelblue")
ggplot(head(df,55), aes(score, word)) +
geom_tile(aes(fill = rescale), colour = "white") +
scale_fill_gradient(low = "red", high = "steelblue")
ggplot(head(df,55), aes(X=score, y=word, fill=freq)) +
geom_tile(aes(fill = rescale), colour = "white") +
scale_fill_gradient(low = "red", high = "steelblue")
ggplot(head(df,55), aes(X=score, y=word, fill=freq)) +
xlim=c(-2,2) +
geom_tile(aes(fill = rescale), colour = "white") +
scale_fill_gradient(low = "red", high = "steelblue")
ggplot(head(df,55), aes(X=score, y=word, fill=freq)) +
xlim=c(-2,2) +
# geom_tile(aes(fill = rescale), colour = "white") +
scale_fill_gradient(low = "red", high = "steelblue")
ggplot(head(df,55), aes(X=score, y=word, fill=freq)) +
xlim=c(-2,2)
ggplot(head(df,55), aes(X=score, y=word, fill=freq))
ggplot(head(df,55), aes(X=score, y=word, fill=freq)) +
geom_tile(aes(score), colour = "white") +
scale_fill_gradient(low = "red", high = "steelblue")
ggplot(head(df,55), aes(X=freq, y=word, fill=score)) +
geom_tile(aes(score), colour = "white") +
scale_fill_gradient(low = "red", high = "steelblue")
ggplot(head(df,55), aes(X=freq, y=word, fill=score)) +
geom_tile(aes(score), colour = "white") +
scale_fill_gradient(low = "red", high = "steelblue", name="Ep Sentiment")
setwd("//svrau100qsm00.oceania.corp.anz.com/mckinns2$/My Documents/Current Work/R")
install.packages("syuzhet")
library("dplyr")
#word analysis
library(tm)
# reframe data
library(reshape2)
#graphing
library(ggplot2)
#Correlogram is a graph of correlation matrix
library(corrplot)
#remove unwanted chars
library(stringr)
#req for stem
library(SnowballC)
# wordcloud
library(wordcloud)
library(RColorBrewer)
simp <- read.csv2("/SIMP_s08_e23.txt",
header=FALSE,
na.strings=c("-", "[", "]"),
blank.lines.skip=TRUE)
readwd()
getwd()
setwd("E://R/Text mining notes")
simp <- read.csv2("/SIMP_s08_e23.txt",
header=FALSE,
na.strings=c("-", "[", "]"),
blank.lines.skip=TRUE)
simp <- read.csv2("SIMP_s08_e23.txt",
header=FALSE,
na.strings=c("-", "[", "]"),
blank.lines.skip=TRUE)
str(simp)
simp$V1 <- str_replace_all(simp$V1, "[^[:alnum:]]", " ")
#simp$V2 <- str_replace_all(simp$V2, "[^[:alnum:]]", " ")
#simp$V3 <- str_replace_all(simp$V3, "[^[:alnum:]]", " ")
#bind 3 cols into 1 and rename
#simp1 <- as.data.frame(paste(simp$V1,simp$V2,simp$V3))
colnames(simp1) <- c( "Lines")
colnames(simp) <- c( "Lines")
str(simp)
title: "Homers Enemy - Sentiment Analysis"
title: "Homers Enemy \- Sentiment Analysis"
title: "Homers Enemy : Sentiment Analysis"
title: "x"
![](E://R/Text mining notes/the-simpsons-banner.jpeg)
![]("E://R/Text mining notes/the-simpsons-banner.jpeg"")
![Test]("E://R/Text mining notes/the-simpsons-banner.jpeg"")
!("E://R/Text mining notes/the-simpsons-banner.jpeg"")
### *Synopsis*
![]("E://R/Text mining notes/the-simpsons-banner.jpeg")
![]('E://R/Text mining notes/the-simpsons-banner.jpeg')
